GAS LISTING /tmp/ccj9oNuY.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB33:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** void Riscv::popSppSpie()
  11:src/riscv.cpp **** {
  12              		.loc 1 11 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 12 5
  21              		.loc 1 12 38 is_stmt 0
  22              	#APP
  23              	# 12 "src/riscv.cpp" 1
  13              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 13 5 is_stmt 1
  27              		.loc 1 13 29 is_stmt 0
  28              	# 13 "src/riscv.cpp" 1
  14              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 14 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB34:
GAS LISTING /tmp/ccj9oNuY.s 			page 2


  15:src/riscv.cpp **** 
  16:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  17:src/riscv.cpp **** {
  47              		.loc 1 17 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FA 		addi	sp,sp,-96
  50              		.cfi_def_cfa_offset 96
  51 0024 233C1104 		sd	ra,88(sp)
  52 0028 23388104 		sd	s0,80(sp)
  53              		.cfi_offset 1, -8
  54              		.cfi_offset 8, -16
  55 002c 13040106 		addi	s0,sp,96
  56              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp ****     uint64 scause = r_scause();
  57              		.loc 1 18 5
  58              	.LBB34:
  59              	.LBB35:
  60              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** enum opcodes{
  11:src/../h/riscv.hpp ****     MEM_ALLOC = 0x01,
  12:src/../h/riscv.hpp ****     MEM_FREE = 0x02,
  13:src/../h/riscv.hpp ****     MEM_GET_FREE_SPACE = 0x03,
  14:src/../h/riscv.hpp ****     MEM_GET_LARGEST_BLOCK_SIZE= 0x04,
  15:src/../h/riscv.hpp ****     THREAD_CREATE = 0x11,
  16:src/../h/riscv.hpp ****     THREAD_EXIT = 0x12,
  17:src/../h/riscv.hpp ****     THREAD_DISPATCH = 0x13,
  18:src/../h/riscv.hpp ****     SEM_OPEN = 0x21,
  19:src/../h/riscv.hpp ****     SEM_CLOSE = 0x22,
  20:src/../h/riscv.hpp ****     SEM_WAIT = 0x23,
  21:src/../h/riscv.hpp ****     SEM_SIGNAL = 0x24,
  22:src/../h/riscv.hpp ****     TIME_SLEEP = 0x31,
  23:src/../h/riscv.hpp ****     GETC = 0x41,
  24:src/../h/riscv.hpp ****     PUTC = 0x42
  25:src/../h/riscv.hpp **** };
  26:src/../h/riscv.hpp **** 
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp **** 
  30:src/../h/riscv.hpp **** enum Interrupts{
  31:src/../h/riscv.hpp ****     ECALL_USER = 0x0000000000000008UL,
  32:src/../h/riscv.hpp ****     ECALL_SUPER = 0x0000000000000009UL,
  33:src/../h/riscv.hpp ****     SOFTWARE = 0x8000000000000001UL,
  34:src/../h/riscv.hpp ****     EXTERNAL = 0x8000000000000009UL,
  35:src/../h/riscv.hpp **** };
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp **** class Riscv
  39:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccj9oNuY.s 			page 3


  40:src/../h/riscv.hpp **** public:
  41:src/../h/riscv.hpp **** 
  42:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  43:src/../h/riscv.hpp ****     static void popSppSpie();
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp ****     // read register scause
  46:src/../h/riscv.hpp ****     static uint64 r_scause();
  47:src/../h/riscv.hpp **** 
  48:src/../h/riscv.hpp ****     // write register scause
  49:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  50:src/../h/riscv.hpp **** 
  51:src/../h/riscv.hpp ****     // read register sepc
  52:src/../h/riscv.hpp ****     static uint64 r_sepc();
  53:src/../h/riscv.hpp **** 
  54:src/../h/riscv.hpp ****     // write register sepc
  55:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  56:src/../h/riscv.hpp **** 
  57:src/../h/riscv.hpp ****     // read register stvec
  58:src/../h/riscv.hpp ****     static uint64 r_stvec();
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // write register stvec
  61:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // read register stval
  64:src/../h/riscv.hpp ****     static uint64 r_stval();
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // write register stval
  67:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     enum BitMaskSip
  70:src/../h/riscv.hpp ****     {
  71:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  72:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  73:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  74:src/../h/riscv.hpp ****     };
  75:src/../h/riscv.hpp **** 
  76:src/../h/riscv.hpp ****     // mask set register sip
  77:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // mask clear register sip
  80:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // read register sip
  83:src/../h/riscv.hpp ****     static uint64 r_sip();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // write register sip
  86:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     enum BitMaskSstatus
  89:src/../h/riscv.hpp ****     {
  90:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  91:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  92:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  93:src/../h/riscv.hpp ****     };
  94:src/../h/riscv.hpp **** 
  95:src/../h/riscv.hpp ****     // mask set register sstatus
  96:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
GAS LISTING /tmp/ccj9oNuY.s 			page 4


  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp ****     // mask clear register sstatus
  99:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp ****     // read register sstatus
 102:src/../h/riscv.hpp ****     static uint64 r_sstatus();
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp ****     // write register sstatus
 105:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
 106:src/../h/riscv.hpp **** 
 107:src/../h/riscv.hpp ****     // supervisor trap
 108:src/../h/riscv.hpp ****     static void supervisorTrap();
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp **** private:
 111:src/../h/riscv.hpp **** 
 112:src/../h/riscv.hpp ****     // supervisor trap handler
 113:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp **** };
 116:src/../h/riscv.hpp **** 
 117:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 118:src/../h/riscv.hpp **** {
 119:src/../h/riscv.hpp ****     uint64 volatile scause;
  61              		.loc 2 119 5
 120:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  62              		.loc 2 120 5
  63              		.loc 2 120 72 is_stmt 0
  64              	#APP
  65              	# 120 "src/../h/riscv.hpp" 1
 121              	    return scause;
  66              		csrr a5, scause
  67              	# 0 "" 2
  68              	#NO_APP
  69 0034 2334F4FC 		sd	a5,-56(s0)
  70              		.loc 2 121 5 is_stmt 1
  71              		.loc 2 121 12 is_stmt 0
  72 0038 033784FC 		ld	a4,-56(s0)
  73              	.LVL0:
  74              	.LBE35:
  75              	.LBE34:
  19:src/riscv.cpp ****     if (scause == ECALL_USER || scause == ECALL_SUPER)
  76              		.loc 1 19 5 is_stmt 1
  77              	.LBB36:
  78              		.loc 1 19 30 is_stmt 0
  79 003c 930687FF 		addi	a3,a4,-8
  80              		.loc 1 19 5
  81 0040 93071000 		li	a5,1
  82 0044 63F8D702 		bleu	a3,a5,.L11
  83              	.LBE36:
  20:src/riscv.cpp ****     {
  21:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  22:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  23:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  24:src/riscv.cpp **** //        TCB::timeSliceCounter = 0;
  25:src/riscv.cpp **** //        TCB::dispatch();
  26:src/riscv.cpp ****         uint64* volatile context;
  27:src/riscv.cpp ****         __asm__ volatile("mv %0, sp":"=r"(context));
GAS LISTING /tmp/ccj9oNuY.s 			page 5


  28:src/riscv.cpp ****         uint64 opcode = context[10];
  29:src/riscv.cpp ****         uint64 a1 = context[11];
  30:src/riscv.cpp **** //        uint64 a2 = context[12];
  31:src/riscv.cpp **** //        uint64 a3 = context[13];
  32:src/riscv.cpp ****         void* ptr;
  33:src/riscv.cpp ****         switch(opcode){
  34:src/riscv.cpp ****             case MEM_ALLOC: {
  35:src/riscv.cpp ****                 size_t size = (size_t) a1;
  36:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
  37:src/riscv.cpp ****                 context[10] = (uint64) ptr;
  38:src/riscv.cpp ****                 break;
  39:src/riscv.cpp ****             }
  40:src/riscv.cpp ****             case MEM_FREE:{
  41:src/riscv.cpp ****                 ptr = (void*)a1;
  42:src/riscv.cpp ****                 int res = MemoryAllocator::mem_free(ptr);
  43:src/riscv.cpp ****                 context[10] = res;
  44:src/riscv.cpp ****                 break;}
  45:src/riscv.cpp ****             case MEM_GET_FREE_SPACE: {
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****                 break;
  48:src/riscv.cpp ****             }
  49:src/riscv.cpp ****             case MEM_GET_LARGEST_BLOCK_SIZE: {
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****                 break;
  52:src/riscv.cpp ****             }
  53:src/riscv.cpp ****             case THREAD_CREATE: {
  54:src/riscv.cpp **** 
  55:src/riscv.cpp ****                 break;
  56:src/riscv.cpp ****             }
  57:src/riscv.cpp ****             case THREAD_EXIT: {
  58:src/riscv.cpp **** 
  59:src/riscv.cpp ****                 break;
  60:src/riscv.cpp ****             }
  61:src/riscv.cpp ****             case THREAD_DISPATCH: {
  62:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
  63:src/riscv.cpp ****                 TCB::dispatch();
  64:src/riscv.cpp ****                 break;
  65:src/riscv.cpp ****             }
  66:src/riscv.cpp ****             case SEM_OPEN: {
  67:src/riscv.cpp **** 
  68:src/riscv.cpp ****                 break;
  69:src/riscv.cpp ****             }
  70:src/riscv.cpp ****             case SEM_CLOSE: {
  71:src/riscv.cpp **** 
  72:src/riscv.cpp ****                 break;
  73:src/riscv.cpp ****             }
  74:src/riscv.cpp ****             case SEM_WAIT: {
  75:src/riscv.cpp **** 
  76:src/riscv.cpp ****                 break;
  77:src/riscv.cpp ****             }
  78:src/riscv.cpp ****             case SEM_SIGNAL: {
  79:src/riscv.cpp **** 
  80:src/riscv.cpp ****                 break;
  81:src/riscv.cpp ****             }
  82:src/riscv.cpp ****             case TIME_SLEEP: {
  83:src/riscv.cpp **** 
  84:src/riscv.cpp ****                 break;
GAS LISTING /tmp/ccj9oNuY.s 			page 6


  85:src/riscv.cpp ****             }
  86:src/riscv.cpp ****             case GETC: {
  87:src/riscv.cpp **** 
  88:src/riscv.cpp ****                 break;
  89:src/riscv.cpp ****             }
  90:src/riscv.cpp ****             case PUTC: {
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****                 break;
  93:src/riscv.cpp ****             }
  94:src/riscv.cpp ****         }
  95:src/riscv.cpp ****         w_sstatus(sstatus);
  96:src/riscv.cpp ****         w_sepc(sepc);
  97:src/riscv.cpp ****     }
  98:src/riscv.cpp ****     else if (scause == SOFTWARE)
  84              		.loc 1 98 10 is_stmt 1
  85              	.LBB69:
  86              	.LBB37:
  87 0048 9307F0FF 		li	a5,-1
  88 004c 9397F703 		slli	a5,a5,63
  89 0050 93871700 		addi	a5,a5,1
  90 0054 630AF70C 		beq	a4,a5,.L12
  99:src/riscv.cpp ****     {
 100:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 101:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 102:src/riscv.cpp ****         TCB::timeSliceCounter++;
 103:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 104:src/riscv.cpp ****         {
 105:src/riscv.cpp ****             uint64 volatile sepc = r_sepc();
 106:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 107:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 108:src/riscv.cpp ****             TCB::dispatch();
 109:src/riscv.cpp ****             w_sstatus(sstatus);
 110:src/riscv.cpp ****             w_sepc(sepc);
 111:src/riscv.cpp ****         }
 112:src/riscv.cpp ****     }
 113:src/riscv.cpp ****     else if (scause == EXTERNAL)
  91              		.loc 1 113 10
  92 0058 9307F0FF 		li	a5,-1
  93 005c 9397F703 		slli	a5,a5,63
  94 0060 93879700 		addi	a5,a5,9
  95 0064 631AF706 		bne	a4,a5,.L3
 114:src/riscv.cpp ****     {
 115:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 116:src/riscv.cpp ****         console_handler();
  96              		.loc 1 116 9
  97              		.loc 1 116 24 is_stmt 0
  98 0068 97000000 		call	console_handler@plt
  98      E7800000 
  99              	.LVL1:
 100              	.LBE37:
 101              	.LBE69:
 117:src/riscv.cpp ****     }
 118:src/riscv.cpp ****     else
 119:src/riscv.cpp ****     {
 120:src/riscv.cpp **** 
 121:src/riscv.cpp ****         // unexpected trap cause
 122:src/riscv.cpp ****     }
GAS LISTING /tmp/ccj9oNuY.s 			page 7


 123:src/riscv.cpp **** }
 102              		.loc 1 123 1
 103 0070 6F008006 		j	.L3
 104              	.LVL2:
 105              	.L11:
 106              	.LBB70:
 107              	.LBB53:
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 108              		.loc 1 22 9 is_stmt 1
 109              	.LBB54:
 110              	.LBB55:
 122:src/../h/riscv.hpp **** }
 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 125:src/../h/riscv.hpp **** {
 126:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 127:src/../h/riscv.hpp **** }
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 130:src/../h/riscv.hpp **** {
 131:src/../h/riscv.hpp ****     uint64 volatile sepc;
 111              		.loc 2 131 5
 132:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 112              		.loc 2 132 5
 113              		.loc 2 132 64 is_stmt 0
 114              	#APP
 115              	# 132 "src/../h/riscv.hpp" 1
 133              	    return sepc;
 116              		csrr a5, sepc
 117              	# 0 "" 2
 118              	#NO_APP
 119 0078 233CF4FC 		sd	a5,-40(s0)
 120              		.loc 2 133 5 is_stmt 1
 121              		.loc 2 133 12 is_stmt 0
 122 007c 833784FD 		ld	a5,-40(s0)
 123              	.LBE55:
 124              	.LBE54:
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 125              		.loc 1 22 41
 126 0080 93874700 		addi	a5,a5,4
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 127              		.loc 1 22 43
 128 0084 2330F4FA 		sd	a5,-96(s0)
  23:src/riscv.cpp **** //        TCB::timeSliceCounter = 0;
 129              		.loc 1 23 9 is_stmt 1
 130              	.LBB56:
 131              	.LBB57:
 134:src/../h/riscv.hpp **** }
 135:src/../h/riscv.hpp **** 
 136:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 137:src/../h/riscv.hpp **** {
 138:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 139:src/../h/riscv.hpp **** }
 140:src/../h/riscv.hpp **** 
 141:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 142:src/../h/riscv.hpp **** {
 143:src/../h/riscv.hpp ****     uint64 volatile stvec;
GAS LISTING /tmp/ccj9oNuY.s 			page 8


 144:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 145:src/../h/riscv.hpp ****     return stvec;
 146:src/../h/riscv.hpp **** }
 147:src/../h/riscv.hpp **** 
 148:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 149:src/../h/riscv.hpp **** {
 150:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 151:src/../h/riscv.hpp **** }
 152:src/../h/riscv.hpp **** 
 153:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 154:src/../h/riscv.hpp **** {
 155:src/../h/riscv.hpp ****     uint64 volatile stval;
 156:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 157:src/../h/riscv.hpp ****     return stval;
 158:src/../h/riscv.hpp **** }
 159:src/../h/riscv.hpp **** 
 160:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 161:src/../h/riscv.hpp **** {
 162:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 163:src/../h/riscv.hpp **** }
 164:src/../h/riscv.hpp **** 
 165:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 166:src/../h/riscv.hpp **** {
 167:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 168:src/../h/riscv.hpp **** }
 169:src/../h/riscv.hpp **** 
 170:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 171:src/../h/riscv.hpp **** {
 172:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 173:src/../h/riscv.hpp **** }
 174:src/../h/riscv.hpp **** 
 175:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 176:src/../h/riscv.hpp **** {
 177:src/../h/riscv.hpp ****     uint64 volatile sip;
 178:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 179:src/../h/riscv.hpp ****     return sip;
 180:src/../h/riscv.hpp **** }
 181:src/../h/riscv.hpp **** 
 182:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 183:src/../h/riscv.hpp **** {
 184:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 185:src/../h/riscv.hpp **** }
 186:src/../h/riscv.hpp **** 
 187:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 188:src/../h/riscv.hpp **** {
 189:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 190:src/../h/riscv.hpp **** }
 191:src/../h/riscv.hpp **** 
 192:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 193:src/../h/riscv.hpp **** {
 194:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 195:src/../h/riscv.hpp **** }
 196:src/../h/riscv.hpp **** 
 197:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 198:src/../h/riscv.hpp **** {
 199:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 132              		.loc 2 199 5
GAS LISTING /tmp/ccj9oNuY.s 			page 9


 200:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 133              		.loc 2 200 5
 134              		.loc 2 200 76 is_stmt 0
 135              	#APP
 136              	# 200 "src/../h/riscv.hpp" 1
 201              	    return sstatus;
 137              		csrr a5, sstatus
 138              	# 0 "" 2
 139              	#NO_APP
 140 008c 2338F4FC 		sd	a5,-48(s0)
 141              		.loc 2 201 5 is_stmt 1
 142              		.loc 2 201 12 is_stmt 0
 143 0090 833704FD 		ld	a5,-48(s0)
 144              	.LBE57:
 145              	.LBE56:
  23:src/riscv.cpp **** //        TCB::timeSliceCounter = 0;
 146              		.loc 1 23 45
 147 0094 2334F4FA 		sd	a5,-88(s0)
  26:src/riscv.cpp ****         __asm__ volatile("mv %0, sp":"=r"(context));
 148              		.loc 1 26 9 is_stmt 1
  27:src/riscv.cpp ****         uint64 opcode = context[10];
 149              		.loc 1 27 9
  27:src/riscv.cpp ****         uint64 opcode = context[10];
 150              		.loc 1 27 52 is_stmt 0
 151              	#APP
 152              	# 27 "src/riscv.cpp" 1
 153              		mv a5, sp
 154              	# 0 "" 2
 155              	#NO_APP
 156 009c 2338F4FA 		sd	a5,-80(s0)
  28:src/riscv.cpp ****         uint64 a1 = context[11];
 157              		.loc 1 28 9 is_stmt 1
  28:src/riscv.cpp ****         uint64 a1 = context[11];
 158              		.loc 1 28 35 is_stmt 0
 159 00a0 833704FB 		ld	a5,-80(s0)
 160 00a4 83B70705 		ld	a5,80(a5)
 161              	.LVL3:
  29:src/riscv.cpp **** //        uint64 a2 = context[12];
 162              		.loc 1 29 9 is_stmt 1
  29:src/riscv.cpp **** //        uint64 a2 = context[12];
 163              		.loc 1 29 31 is_stmt 0
 164 00a8 033704FB 		ld	a4,-80(s0)
 165              	.LVL4:
 166 00ac 03358705 		ld	a0,88(a4)
 167              	.LVL5:
  32:src/riscv.cpp ****         switch(opcode){
 168              		.loc 1 32 9 is_stmt 1
  33:src/riscv.cpp ****             case MEM_ALLOC: {
 169              		.loc 1 33 9
 170              	.LBB58:
 171 00b0 13072000 		li	a4,2
 172 00b4 6384E704 		beq	a5,a4,.L5
 173 00b8 13073001 		li	a4,19
 174 00bc 638AE704 		beq	a5,a4,.L6
 175 00c0 13071000 		li	a4,1
 176 00c4 6382E702 		beq	a5,a4,.L13
 177              	.LVL6:
GAS LISTING /tmp/ccj9oNuY.s 			page 10


 178              	.L7:
 179              	.LBE58:
  95:src/riscv.cpp ****         w_sepc(sepc);
 180              		.loc 1 95 9
  95:src/riscv.cpp ****         w_sepc(sepc);
 181              		.loc 1 95 18 is_stmt 0
 182 00c8 833784FA 		ld	a5,-88(s0)
 183              	.LVL7:
 184              	.LBB62:
 185              	.LBB63:
 202:src/../h/riscv.hpp **** }
 203:src/../h/riscv.hpp **** 
 204:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 205:src/../h/riscv.hpp **** {
 206:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 186              		.loc 2 206 5 is_stmt 1
 187              		.loc 2 206 77 is_stmt 0
 188              	#APP
 189              	# 206 "src/../h/riscv.hpp" 1
 207              	}
 190              		csrw sstatus, a5
 191              	# 0 "" 2
 192              	.LVL8:
 193              	#NO_APP
 194              	.LBE63:
 195              	.LBE62:
  96:src/riscv.cpp ****     }
 196              		.loc 1 96 9 is_stmt 1
  96:src/riscv.cpp ****     }
 197              		.loc 1 96 15 is_stmt 0
 198 00d0 833704FA 		ld	a5,-96(s0)
 199              	.LVL9:
 200              	.LBB64:
 201              	.LBB65:
 138:src/../h/riscv.hpp **** }
 202              		.loc 2 138 5 is_stmt 1
 138:src/../h/riscv.hpp **** }
 203              		.loc 2 138 65 is_stmt 0
 204              	#APP
 205              	# 138 "src/../h/riscv.hpp" 1
 206              		csrw sepc, a5
 207              	# 0 "" 2
 208              	.LVL10:
 209              	#NO_APP
 210              	.L3:
 211              	.LBE65:
 212              	.LBE64:
 213              	.LBE53:
 214              	.LBE70:
 215              		.loc 1 123 1
 216 00d8 83308105 		ld	ra,88(sp)
 217              		.cfi_remember_state
 218              		.cfi_restore 1
 219 00dc 03340105 		ld	s0,80(sp)
 220              		.cfi_restore 8
 221              		.cfi_def_cfa 2, 96
 222 00e0 13010106 		addi	sp,sp,96
GAS LISTING /tmp/ccj9oNuY.s 			page 11


 223              		.cfi_def_cfa_offset 0
 224 00e4 67800000 		jr	ra
 225              	.LVL11:
 226              	.L13:
 227              		.cfi_restore_state
 228              	.LBB71:
 229              	.LBB67:
 230              	.LBB66:
 231              	.LBB59:
  34:src/riscv.cpp ****                 size_t size = (size_t) a1;
 232              		.loc 1 34 13 is_stmt 1
  34:src/riscv.cpp ****                 size_t size = (size_t) a1;
 233              		.loc 1 34 29
 234              	.LBB60:
  35:src/riscv.cpp ****                 ptr = MemoryAllocator::mem_alloc(size);
 235              		.loc 1 35 17
  36:src/riscv.cpp ****                 context[10] = (uint64) ptr;
 236              		.loc 1 36 17
  36:src/riscv.cpp ****                 context[10] = (uint64) ptr;
 237              		.loc 1 36 49 is_stmt 0
 238 00e8 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 238      E7800000 
 239              	.LVL12:
  37:src/riscv.cpp ****                 break;
 240              		.loc 1 37 17 is_stmt 1
 241 00f0 833704FB 		ld	a5,-80(s0)
  37:src/riscv.cpp ****                 break;
 242              		.loc 1 37 29 is_stmt 0
 243 00f4 23B8A704 		sd	a0,80(a5)
  38:src/riscv.cpp ****             }
 244              		.loc 1 38 17 is_stmt 1
 245 00f8 6FF01FFD 		j	.L7
 246              	.LVL13:
 247              	.L5:
 248              	.LBE60:
  40:src/riscv.cpp ****                 ptr = (void*)a1;
 249              		.loc 1 40 13
  40:src/riscv.cpp ****                 ptr = (void*)a1;
 250              		.loc 1 40 27
 251              	.LBB61:
  41:src/riscv.cpp ****                 int res = MemoryAllocator::mem_free(ptr);
 252              		.loc 1 41 17
  42:src/riscv.cpp ****                 context[10] = res;
 253              		.loc 1 42 17
  42:src/riscv.cpp ****                 context[10] = res;
 254              		.loc 1 42 52 is_stmt 0
 255 00fc 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 255      E7800000 
 256              	.LVL14:
  43:src/riscv.cpp ****                 break;}
 257              		.loc 1 43 17 is_stmt 1
 258 0104 833704FB 		ld	a5,-80(s0)
  43:src/riscv.cpp ****                 break;}
 259              		.loc 1 43 29 is_stmt 0
 260 0108 23B8A704 		sd	a0,80(a5)
  44:src/riscv.cpp ****             case MEM_GET_FREE_SPACE: {
 261              		.loc 1 44 17 is_stmt 1
GAS LISTING /tmp/ccj9oNuY.s 			page 12


 262 010c 6FF0DFFB 		j	.L7
 263              	.LVL15:
 264              	.L6:
 265              	.LBE61:
  61:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
 266              		.loc 1 61 13
  61:src/riscv.cpp ****                 TCB::timeSliceCounter = 0;
 267              		.loc 1 61 35
  62:src/riscv.cpp ****                 TCB::dispatch();
 268              		.loc 1 62 17
  62:src/riscv.cpp ****                 TCB::dispatch();
 269              		.loc 1 62 39 is_stmt 0
 270 0110 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 270      83B70700 
 271              	.LVL16:
 272 0118 23B00700 		sd	zero,0(a5)
  63:src/riscv.cpp ****                 break;
 273              		.loc 1 63 17 is_stmt 1
  63:src/riscv.cpp ****                 break;
 274              		.loc 1 63 30 is_stmt 0
 275 011c 97000000 		call	_ZN3TCB8dispatchEv@plt
 275      E7800000 
 276              	.LVL17:
  64:src/riscv.cpp ****             }
 277              		.loc 1 64 17 is_stmt 1
 278 0124 6FF05FFA 		j	.L7
 279              	.LVL18:
 280              	.L12:
 281              	.LBE59:
 282              	.LBE66:
 283              	.LBE67:
 284              	.LBB68:
 285              	.LBB38:
 101:src/riscv.cpp ****         TCB::timeSliceCounter++;
 286              		.loc 1 101 9
 287              	.LBB39:
 288              	.LBB40:
 172:src/../h/riscv.hpp **** }
 289              		.loc 2 172 5
 172:src/../h/riscv.hpp **** }
 290              		.loc 2 172 64 is_stmt 0
 291 0128 93072000 		li	a5,2
 292              	#APP
 293              	# 172 "src/../h/riscv.hpp" 1
 294              		csrc sip, a5
 295              	# 0 "" 2
 296              	.LVL19:
 297              	#NO_APP
 298              	.LBE40:
 299              	.LBE39:
 102:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 300              		.loc 1 102 9 is_stmt 1
 102:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 301              		.loc 1 102 30 is_stmt 0
 302 0130 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 302      03370700 
 303              	.LVL20:
GAS LISTING /tmp/ccj9oNuY.s 			page 13


 304 0138 83370700 		ld	a5,0(a4)
 305 013c 93871700 		addi	a5,a5,1
 306 0140 2330F700 		sd	a5,0(a4)
 103:src/riscv.cpp ****         {
 307              		.loc 1 103 9 is_stmt 1
 308              	.LBB41:
 103:src/riscv.cpp ****         {
 309              		.loc 1 103 64 is_stmt 0
 310 0144 17070000 		la	a4,_ZN3TCB7runningE
 310      03370700 
 311 014c 03370700 		ld	a4,0(a4)
 312              	.LVL21:
 313              	.LBB42:
 314              	.LBB43:
 315              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** //
   2:src/../h/tcb.hpp **** // Created by marko on 20.4.22..
   3:src/../h/tcb.hpp **** //
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   6:src/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   7:src/../h/tcb.hpp **** 
   8:src/../h/tcb.hpp **** #include "../lib/hw.h"
   9:src/../h/tcb.hpp **** #include "scheduler.hpp"
  10:src/../h/tcb.hpp **** 
  11:src/../h/tcb.hpp **** // Thread Control Block
  12:src/../h/tcb.hpp **** class TCB
  13:src/../h/tcb.hpp **** {
  14:src/../h/tcb.hpp **** public:
  15:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 316              		.loc 3 21 35 is_stmt 1
 317              		.loc 3 21 42 is_stmt 0
 318 0150 03370702 		ld	a4,32(a4)
 319              	.LVL22:
 320              	.LBE43:
 321              	.LBE42:
 103:src/riscv.cpp ****         {
 322              		.loc 1 103 9
 323 0154 E3E2E7F8 		bltu	a5,a4,.L3
 324              	.LBB44:
 105:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 325              		.loc 1 105 13 is_stmt 1
 326              	.LBB45:
 327              	.LBB46:
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 328              		.loc 2 131 5
 132:src/../h/riscv.hpp ****     return sepc;
 329              		.loc 2 132 5
 132:src/../h/riscv.hpp ****     return sepc;
 330              		.loc 2 132 64 is_stmt 0
 331              	#APP
GAS LISTING /tmp/ccj9oNuY.s 			page 14


 332              	# 132 "src/../h/riscv.hpp" 1
 333              		csrr a5, sepc
 334              	# 0 "" 2
 335              	#NO_APP
 336 015c 2334F4FE 		sd	a5,-24(s0)
 133:src/../h/riscv.hpp **** }
 337              		.loc 2 133 5 is_stmt 1
 133:src/../h/riscv.hpp **** }
 338              		.loc 2 133 12 is_stmt 0
 339 0160 833784FE 		ld	a5,-24(s0)
 340              	.LBE46:
 341              	.LBE45:
 105:src/riscv.cpp ****             uint64 volatile sstatus = r_sstatus();
 342              		.loc 1 105 43
 343 0164 233CF4FA 		sd	a5,-72(s0)
 106:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 344              		.loc 1 106 13 is_stmt 1
 345              	.LBB47:
 346              	.LBB48:
 199:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 347              		.loc 2 199 5
 200:src/../h/riscv.hpp ****     return sstatus;
 348              		.loc 2 200 5
 200:src/../h/riscv.hpp ****     return sstatus;
 349              		.loc 2 200 76 is_stmt 0
 350              	#APP
 351              	# 200 "src/../h/riscv.hpp" 1
 352              		csrr a5, sstatus
 353              	# 0 "" 2
 354              	#NO_APP
 355 016c 2330F4FE 		sd	a5,-32(s0)
 201:src/../h/riscv.hpp **** }
 356              		.loc 2 201 5 is_stmt 1
 201:src/../h/riscv.hpp **** }
 357              		.loc 2 201 12 is_stmt 0
 358 0170 833704FE 		ld	a5,-32(s0)
 359              	.LBE48:
 360              	.LBE47:
 106:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 361              		.loc 1 106 49
 362 0174 2330F4FC 		sd	a5,-64(s0)
 107:src/riscv.cpp ****             TCB::dispatch();
 363              		.loc 1 107 13 is_stmt 1
 107:src/riscv.cpp ****             TCB::dispatch();
 364              		.loc 1 107 35 is_stmt 0
 365 0178 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 365      83B70700 
 366 0180 23B00700 		sd	zero,0(a5)
 108:src/riscv.cpp ****             w_sstatus(sstatus);
 367              		.loc 1 108 13 is_stmt 1
 108:src/riscv.cpp ****             w_sstatus(sstatus);
 368              		.loc 1 108 26 is_stmt 0
 369 0184 97000000 		call	_ZN3TCB8dispatchEv@plt
 369      E7800000 
 370              	.LVL23:
 109:src/riscv.cpp ****             w_sepc(sepc);
 371              		.loc 1 109 13 is_stmt 1
GAS LISTING /tmp/ccj9oNuY.s 			page 15


 109:src/riscv.cpp ****             w_sepc(sepc);
 372              		.loc 1 109 22 is_stmt 0
 373 018c 833704FC 		ld	a5,-64(s0)
 374              	.LVL24:
 375              	.LBB49:
 376              	.LBB50:
 206:src/../h/riscv.hpp **** }
 377              		.loc 2 206 5 is_stmt 1
 206:src/../h/riscv.hpp **** }
 378              		.loc 2 206 77 is_stmt 0
 379              	#APP
 380              	# 206 "src/../h/riscv.hpp" 1
 381              		csrw sstatus, a5
 382              	# 0 "" 2
 383              	.LVL25:
 384              	#NO_APP
 385              	.LBE50:
 386              	.LBE49:
 110:src/riscv.cpp ****         }
 387              		.loc 1 110 13 is_stmt 1
 110:src/riscv.cpp ****         }
 388              		.loc 1 110 19 is_stmt 0
 389 0194 833784FB 		ld	a5,-72(s0)
 390              	.LVL26:
 391              	.LBB51:
 392              	.LBB52:
 138:src/../h/riscv.hpp **** }
 393              		.loc 2 138 5 is_stmt 1
 138:src/../h/riscv.hpp **** }
 394              		.loc 2 138 65 is_stmt 0
 395              	#APP
 396              	# 138 "src/../h/riscv.hpp" 1
 139:src/../h/riscv.hpp **** 
 397              		csrw sepc, a5
 398              	# 0 "" 2
 399              		.loc 2 139 1
 400              	#NO_APP
 401 019c 6FF0DFF3 		j	.L3
 402              	.LBE52:
 403              	.LBE51:
 404              	.LBE44:
 405              	.LBE41:
 406              	.LBE38:
 407              	.LBE68:
 408              	.LBE71:
 409              		.cfi_endproc
 410              	.LFE34:
 412              	.Letext0:
 413              		.file 4 "src/../h/../lib/hw.h"
 414              		.file 5 "src/../h/MemoryAllocator.hpp"
 415              		.file 6 "src/../lib/console.h"
GAS LISTING /tmp/ccj9oNuY.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccj9oNuY.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccj9oNuY.s:13     .text:0000000000000000 .L0 
     /tmp/ccj9oNuY.s:14     .text:0000000000000000 .L0 
     /tmp/ccj9oNuY.s:15     .text:0000000000000004 .L0 
     /tmp/ccj9oNuY.s:17     .text:0000000000000008 .L0 
     /tmp/ccj9oNuY.s:19     .text:000000000000000c .L0 
     /tmp/ccj9oNuY.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:12     .text:000000000000000c .L0 
     /tmp/ccj9oNuY.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:13     .text:0000000000000010 .L0 
     /tmp/ccj9oNuY.s:33     .text:0000000000000014 .L0 
     /tmp/ccj9oNuY.s:34     .text:0000000000000018 .L0 
     /tmp/ccj9oNuY.s:35     .text:0000000000000018 .L0 
     /tmp/ccj9oNuY.s:37     .text:000000000000001c .L0 
     /tmp/ccj9oNuY.s:39     .text:0000000000000020 .L0 
     /tmp/ccj9oNuY.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccj9oNuY.s:48     .text:0000000000000020 .L0 
     /tmp/ccj9oNuY.s:49     .text:0000000000000020 .L0 
     /tmp/ccj9oNuY.s:50     .text:0000000000000024 .L0 
     /tmp/ccj9oNuY.s:53     .text:000000000000002c .L0 
     /tmp/ccj9oNuY.s:54     .text:000000000000002c .L0 
     /tmp/ccj9oNuY.s:56     .text:0000000000000030 .L0 
     /tmp/ccj9oNuY.s:61     .text:0000000000000030 .L0 
     /tmp/ccj9oNuY.s:62     .text:0000000000000030 .L0 
     /tmp/ccj9oNuY.s:63     .text:0000000000000030 .L0 
  src/../h/riscv.hpp:120    .text:0000000000000030 .L0 
     /tmp/ccj9oNuY.s:71     .text:0000000000000038 .L0 
     /tmp/ccj9oNuY.s:72     .text:0000000000000038 .L0 
     /tmp/ccj9oNuY.s:78     .text:000000000000003c .L0 
     /tmp/ccj9oNuY.s:79     .text:000000000000003c .L0 
     /tmp/ccj9oNuY.s:81     .text:0000000000000040 .L0 
     /tmp/ccj9oNuY.s:87     .text:0000000000000048 .L0 
     /tmp/ccj9oNuY.s:92     .text:0000000000000058 .L0 
     /tmp/ccj9oNuY.s:97     .text:0000000000000068 .L0 
     /tmp/ccj9oNuY.s:98     .text:0000000000000068 .L0 
     /tmp/ccj9oNuY.s:103    .text:0000000000000070 .L0 
     /tmp/ccj9oNuY.s:111    .text:0000000000000074 .L0 
     /tmp/ccj9oNuY.s:112    .text:0000000000000074 .L0 
     /tmp/ccj9oNuY.s:113    .text:0000000000000074 .L0 
  src/../h/riscv.hpp:132    .text:0000000000000074 .L0 
     /tmp/ccj9oNuY.s:121    .text:000000000000007c .L0 
     /tmp/ccj9oNuY.s:122    .text:000000000000007c .L0 
     /tmp/ccj9oNuY.s:126    .text:0000000000000080 .L0 
     /tmp/ccj9oNuY.s:128    .text:0000000000000084 .L0 
     /tmp/ccj9oNuY.s:132    .text:0000000000000088 .L0 
     /tmp/ccj9oNuY.s:133    .text:0000000000000088 .L0 
     /tmp/ccj9oNuY.s:134    .text:0000000000000088 .L0 
  src/../h/riscv.hpp:200    .text:0000000000000088 .L0 
     /tmp/ccj9oNuY.s:142    .text:0000000000000090 .L0 
     /tmp/ccj9oNuY.s:143    .text:0000000000000090 .L0 
     /tmp/ccj9oNuY.s:147    .text:0000000000000094 .L0 
     /tmp/ccj9oNuY.s:149    .text:0000000000000098 .L0 
     /tmp/ccj9oNuY.s:150    .text:0000000000000098 .L0 
       src/riscv.cpp:27     .text:0000000000000098 .L0 
     /tmp/ccj9oNuY.s:158    .text:00000000000000a0 .L0 
GAS LISTING /tmp/ccj9oNuY.s 			page 17


     /tmp/ccj9oNuY.s:159    .text:00000000000000a0 .L0 
     /tmp/ccj9oNuY.s:163    .text:00000000000000a8 .L0 
     /tmp/ccj9oNuY.s:164    .text:00000000000000a8 .L0 
     /tmp/ccj9oNuY.s:169    .text:00000000000000b0 .L0 
     /tmp/ccj9oNuY.s:171    .text:00000000000000b0 .L0 
     /tmp/ccj9oNuY.s:181    .text:00000000000000c8 .L0 
     /tmp/ccj9oNuY.s:182    .text:00000000000000c8 .L0 
     /tmp/ccj9oNuY.s:187    .text:00000000000000cc .L0 
  src/../h/riscv.hpp:206    .text:00000000000000cc .L0 
     /tmp/ccj9oNuY.s:197    .text:00000000000000d0 .L0 
     /tmp/ccj9oNuY.s:198    .text:00000000000000d0 .L0 
     /tmp/ccj9oNuY.s:203    .text:00000000000000d4 .L0 
  src/../h/riscv.hpp:138    .text:00000000000000d4 .L0 
     /tmp/ccj9oNuY.s:216    .text:00000000000000d8 .L0 
     /tmp/ccj9oNuY.s:217    .text:00000000000000dc .L0 
     /tmp/ccj9oNuY.s:218    .text:00000000000000dc .L0 
     /tmp/ccj9oNuY.s:220    .text:00000000000000e0 .L0 
     /tmp/ccj9oNuY.s:221    .text:00000000000000e0 .L0 
     /tmp/ccj9oNuY.s:223    .text:00000000000000e4 .L0 
     /tmp/ccj9oNuY.s:227    .text:00000000000000e8 .L0 
     /tmp/ccj9oNuY.s:233    .text:00000000000000e8 .L0 
     /tmp/ccj9oNuY.s:235    .text:00000000000000e8 .L0 
     /tmp/ccj9oNuY.s:236    .text:00000000000000e8 .L0 
     /tmp/ccj9oNuY.s:237    .text:00000000000000e8 .L0 
     /tmp/ccj9oNuY.s:238    .text:00000000000000e8 .L0 
     /tmp/ccj9oNuY.s:241    .text:00000000000000f0 .L0 
     /tmp/ccj9oNuY.s:243    .text:00000000000000f4 .L0 
     /tmp/ccj9oNuY.s:245    .text:00000000000000f8 .L0 
     /tmp/ccj9oNuY.s:250    .text:00000000000000fc .L0 
     /tmp/ccj9oNuY.s:252    .text:00000000000000fc .L0 
     /tmp/ccj9oNuY.s:253    .text:00000000000000fc .L0 
     /tmp/ccj9oNuY.s:254    .text:00000000000000fc .L0 
     /tmp/ccj9oNuY.s:255    .text:00000000000000fc .L0 
     /tmp/ccj9oNuY.s:258    .text:0000000000000104 .L0 
     /tmp/ccj9oNuY.s:260    .text:0000000000000108 .L0 
     /tmp/ccj9oNuY.s:262    .text:000000000000010c .L0 
     /tmp/ccj9oNuY.s:267    .text:0000000000000110 .L0 
     /tmp/ccj9oNuY.s:268    .text:0000000000000110 .L0 
     /tmp/ccj9oNuY.s:269    .text:0000000000000110 .L0 
     /tmp/ccj9oNuY.s:270    .text:0000000000000110 .L0 
     /tmp/ccj9oNuY.s:274    .text:000000000000011c .L0 
     /tmp/ccj9oNuY.s:275    .text:000000000000011c .L0 
     /tmp/ccj9oNuY.s:278    .text:0000000000000124 .L0 
     /tmp/ccj9oNuY.s:289    .text:0000000000000128 .L0 
     /tmp/ccj9oNuY.s:290    .text:0000000000000128 .L0 
     /tmp/ccj9oNuY.s:291    .text:0000000000000128 .L0 
     /tmp/ccj9oNuY.s:301    .text:0000000000000130 .L0 
     /tmp/ccj9oNuY.s:302    .text:0000000000000130 .L0 
     /tmp/ccj9oNuY.s:309    .text:0000000000000144 .L0 
     /tmp/ccj9oNuY.s:310    .text:0000000000000144 .L0 
     /tmp/ccj9oNuY.s:317    .text:0000000000000150 .L0 
     /tmp/ccj9oNuY.s:318    .text:0000000000000150 .L0 
     /tmp/ccj9oNuY.s:323    .text:0000000000000154 .L0 
     /tmp/ccj9oNuY.s:328    .text:0000000000000158 .L0 
     /tmp/ccj9oNuY.s:329    .text:0000000000000158 .L0 
     /tmp/ccj9oNuY.s:330    .text:0000000000000158 .L0 
  src/../h/riscv.hpp:132    .text:0000000000000158 .L0 
GAS LISTING /tmp/ccj9oNuY.s 			page 18


     /tmp/ccj9oNuY.s:338    .text:0000000000000160 .L0 
     /tmp/ccj9oNuY.s:339    .text:0000000000000160 .L0 
     /tmp/ccj9oNuY.s:343    .text:0000000000000164 .L0 
     /tmp/ccj9oNuY.s:347    .text:0000000000000168 .L0 
     /tmp/ccj9oNuY.s:348    .text:0000000000000168 .L0 
     /tmp/ccj9oNuY.s:349    .text:0000000000000168 .L0 
  src/../h/riscv.hpp:200    .text:0000000000000168 .L0 
     /tmp/ccj9oNuY.s:357    .text:0000000000000170 .L0 
     /tmp/ccj9oNuY.s:358    .text:0000000000000170 .L0 
     /tmp/ccj9oNuY.s:362    .text:0000000000000174 .L0 
     /tmp/ccj9oNuY.s:364    .text:0000000000000178 .L0 
     /tmp/ccj9oNuY.s:365    .text:0000000000000178 .L0 
     /tmp/ccj9oNuY.s:368    .text:0000000000000184 .L0 
     /tmp/ccj9oNuY.s:369    .text:0000000000000184 .L0 
     /tmp/ccj9oNuY.s:372    .text:000000000000018c .L0 
     /tmp/ccj9oNuY.s:373    .text:000000000000018c .L0 
     /tmp/ccj9oNuY.s:378    .text:0000000000000190 .L0 
  src/../h/riscv.hpp:206    .text:0000000000000190 .L0 
     /tmp/ccj9oNuY.s:388    .text:0000000000000194 .L0 
     /tmp/ccj9oNuY.s:389    .text:0000000000000194 .L0 
     /tmp/ccj9oNuY.s:394    .text:0000000000000198 .L0 
  src/../h/riscv.hpp:138    .text:0000000000000198 .L0 
     /tmp/ccj9oNuY.s:401    .text:000000000000019c .L0 
     /tmp/ccj9oNuY.s:409    .text:00000000000001a0 .L0 
     /tmp/ccj9oNuY.s:416    .text:00000000000001a0 .L0 
     /tmp/ccj9oNuY.s:270    .text:0000000000000110 .L0 
     /tmp/ccj9oNuY.s:302    .text:0000000000000130 .L0 
     /tmp/ccj9oNuY.s:310    .text:0000000000000144 .L0 
     /tmp/ccj9oNuY.s:365    .text:0000000000000178 .L0 
     /tmp/ccj9oNuY.s:105    .text:0000000000000074 .L11
     /tmp/ccj9oNuY.s:280    .text:0000000000000128 .L12
     /tmp/ccj9oNuY.s:210    .text:00000000000000d8 .L3
     /tmp/ccj9oNuY.s:247    .text:00000000000000fc .L5
     /tmp/ccj9oNuY.s:264    .text:0000000000000110 .L6
     /tmp/ccj9oNuY.s:226    .text:00000000000000e8 .L13
     /tmp/ccj9oNuY.s:178    .text:00000000000000c8 .L7
     /tmp/ccj9oNuY.s:1536   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccj9oNuY.s:2639   .debug_str:000000000000006c .LASF124
     /tmp/ccj9oNuY.s:2785   .debug_str:0000000000000539 .LASF125
     /tmp/ccj9oNuY.s:2823   .debug_str:0000000000000668 .LASF126
     /tmp/ccj9oNuY.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccj9oNuY.s:412    .text:00000000000001a0 .Letext0
     /tmp/ccj9oNuY.s:2615   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccj9oNuY.s:2763   .debug_str:00000000000004c7 .LASF0
     /tmp/ccj9oNuY.s:2781   .debug_str:0000000000000513 .LASF1
     /tmp/ccj9oNuY.s:2751   .debug_str:000000000000047e .LASF2
     /tmp/ccj9oNuY.s:2721   .debug_str:00000000000003aa .LASF4
     /tmp/ccj9oNuY.s:2819   .debug_str:000000000000063b .LASF3
     /tmp/ccj9oNuY.s:2641   .debug_str:0000000000000130 .LASF5
     /tmp/ccj9oNuY.s:2783   .debug_str:0000000000000526 .LASF6
     /tmp/ccj9oNuY.s:2761   .debug_str:00000000000004b4 .LASF7
     /tmp/ccj9oNuY.s:2847   .debug_str:00000000000006fb .LASF8
     /tmp/ccj9oNuY.s:2707   .debug_str:0000000000000328 .LASF9
     /tmp/ccj9oNuY.s:2797   .debug_str:00000000000005aa .LASF10
     /tmp/ccj9oNuY.s:2843   .debug_str:00000000000006e3 .LASF11
     /tmp/ccj9oNuY.s:2643   .debug_str:0000000000000137 .LASF12
     /tmp/ccj9oNuY.s:2619   .debug_str:0000000000000008 .LASF13
GAS LISTING /tmp/ccj9oNuY.s 			page 19


     /tmp/ccj9oNuY.s:2655   .debug_str:0000000000000195 .LASF14
     /tmp/ccj9oNuY.s:2813   .debug_str:0000000000000607 .LASF15
     /tmp/ccj9oNuY.s:2667   .debug_str:00000000000001e3 .LASF16
     /tmp/ccj9oNuY.s:2833   .debug_str:00000000000006b5 .LASF31
     /tmp/ccj9oNuY.s:2827   .debug_str:000000000000068a .LASF17
     /tmp/ccj9oNuY.s:2809   .debug_str:00000000000005f3 .LASF18
     /tmp/ccj9oNuY.s:2745   .debug_str:0000000000000450 .LASF19
     /tmp/ccj9oNuY.s:2821   .debug_str:000000000000064d .LASF20
     /tmp/ccj9oNuY.s:2737   .debug_str:000000000000040c .LASF21
     /tmp/ccj9oNuY.s:2681   .debug_str:0000000000000259 .LASF22
     /tmp/ccj9oNuY.s:2659   .debug_str:00000000000001a6 .LASF23
     /tmp/ccj9oNuY.s:2845   .debug_str:00000000000006f2 .LASF24
     /tmp/ccj9oNuY.s:2733   .debug_str:00000000000003f7 .LASF25
     /tmp/ccj9oNuY.s:2825   .debug_str:0000000000000681 .LASF26
     /tmp/ccj9oNuY.s:2645   .debug_str:0000000000000147 .LASF27
     /tmp/ccj9oNuY.s:2727   .debug_str:00000000000003db .LASF28
     /tmp/ccj9oNuY.s:2635   .debug_str:000000000000004e .LASF29
     /tmp/ccj9oNuY.s:2873   .debug_str:00000000000007dc .LASF30
     /tmp/ccj9oNuY.s:2793   .debug_str:000000000000058f .LASF32
     /tmp/ccj9oNuY.s:2853   .debug_str:0000000000000726 .LASF33
     /tmp/ccj9oNuY.s:2627   .debug_str:0000000000000030 .LASF34
     /tmp/ccj9oNuY.s:2673   .debug_str:0000000000000212 .LASF35
     /tmp/ccj9oNuY.s:2647   .debug_str:0000000000000152 .LASF36
     /tmp/ccj9oNuY.s:2777   .debug_str:0000000000000502 .LASF76
     /tmp/ccj9oNuY.s:2735   .debug_str:0000000000000401 .LASF127
     /tmp/ccj9oNuY.s:2829   .debug_str:0000000000000694 .LASF37
     /tmp/ccj9oNuY.s:2775   .debug_str:00000000000004f9 .LASF38
     /tmp/ccj9oNuY.s:2729   .debug_str:00000000000003e6 .LASF39
     /tmp/ccj9oNuY.s:2811   .debug_str:00000000000005fc .LASF72
     /tmp/ccj9oNuY.s:2871   .debug_str:00000000000007c4 .LASF74
     /tmp/ccj9oNuY.s:2621   .debug_str:0000000000000018 .LASF40
     /tmp/ccj9oNuY.s:2687   .debug_str:0000000000000272 .LASF42
     /tmp/ccj9oNuY.s:2663   .debug_str:00000000000001cd .LASF44
     /tmp/ccj9oNuY.s:2679   .debug_str:0000000000000244 .LASF46
     /tmp/ccj9oNuY.s:2755   .debug_str:0000000000000498 .LASF41
     /tmp/ccj9oNuY.s:2801   .debug_str:00000000000005c2 .LASF43
     /tmp/ccj9oNuY.s:2837   .debug_str:00000000000006cf .LASF45
     /tmp/ccj9oNuY.s:2705   .debug_str:0000000000000315 .LASF47
     /tmp/ccj9oNuY.s:2699   .debug_str:00000000000002f6 .LASF48
     /tmp/ccj9oNuY.s:2669   .debug_str:00000000000001f9 .LASF49
     /tmp/ccj9oNuY.s:2617   .debug_str:0000000000000000 .LASF50
     /tmp/ccj9oNuY.s:2711   .debug_str:000000000000034c .LASF51
     /tmp/ccj9oNuY.s:2839   .debug_str:00000000000006d6 .LASF52
     /tmp/ccj9oNuY.s:2649   .debug_str:000000000000015b .LASF53
     /tmp/ccj9oNuY.s:2879   .debug_str:00000000000007f4 .LASF54
     /tmp/ccj9oNuY.s:2689   .debug_str:0000000000000287 .LASF55
     /tmp/ccj9oNuY.s:2765   .debug_str:00000000000004d4 .LASF56
     /tmp/ccj9oNuY.s:2867   .debug_str:00000000000007ac .LASF57
     /tmp/ccj9oNuY.s:2633   .debug_str:0000000000000047 .LASF58
     /tmp/ccj9oNuY.s:2697   .debug_str:00000000000002e3 .LASF59
     /tmp/ccj9oNuY.s:2703   .debug_str:000000000000030f .LASF60
     /tmp/ccj9oNuY.s:2835   .debug_str:00000000000006bd .LASF61
     /tmp/ccj9oNuY.s:2631   .debug_str:0000000000000041 .LASF62
     /tmp/ccj9oNuY.s:2885   .debug_str:0000000000000846 .LASF63
     /tmp/ccj9oNuY.s:2877   .debug_str:00000000000007e9 .LASF64
     /tmp/ccj9oNuY.s:2817   .debug_str:0000000000000623 .LASF65
     /tmp/ccj9oNuY.s:2779   .debug_str:0000000000000508 .LASF66
GAS LISTING /tmp/ccj9oNuY.s 			page 20


     /tmp/ccj9oNuY.s:2831   .debug_str:000000000000069d .LASF67
     /tmp/ccj9oNuY.s:2653   .debug_str:000000000000018b .LASF68
     /tmp/ccj9oNuY.s:2717   .debug_str:000000000000036c .LASF69
     /tmp/ccj9oNuY.s:2693   .debug_str:00000000000002ae .LASF70
     /tmp/ccj9oNuY.s:2709   .debug_str:0000000000000336 .LASF71
     /tmp/ccj9oNuY.s:2741   .debug_str:0000000000000425 .LASF73
     /tmp/ccj9oNuY.s:2651   .debug_str:000000000000016f .LASF75
     /tmp/ccj9oNuY.s:2855   .debug_str:0000000000000731 .LASF94
     /tmp/ccj9oNuY.s:2789   .debug_str:0000000000000552 .LASF96
     /tmp/ccj9oNuY.s:2625   .debug_str:0000000000000028 .LASF103
     /tmp/ccj9oNuY.s:2715   .debug_str:0000000000000367 .LASF77
     /tmp/ccj9oNuY.s:2803   .debug_str:00000000000005d5 .LASF79
     /tmp/ccj9oNuY.s:2787   .debug_str:0000000000000547 .LASF81
     /tmp/ccj9oNuY.s:2661   .debug_str:00000000000001b6 .LASF83
     /tmp/ccj9oNuY.s:2753   .debug_str:000000000000048c .LASF78
     /tmp/ccj9oNuY.s:2881   .debug_str:00000000000007fc .LASF80
     /tmp/ccj9oNuY.s:2747   .debug_str:0000000000000463 .LASF82
     /tmp/ccj9oNuY.s:2637   .debug_str:0000000000000053 .LASF84
     /tmp/ccj9oNuY.s:2665   .debug_str:00000000000001d6 .LASF85
     /tmp/ccj9oNuY.s:2743   .debug_str:0000000000000434 .LASF86
     /tmp/ccj9oNuY.s:2807   .debug_str:00000000000005ee .LASF128
     /tmp/ccj9oNuY.s:2815   .debug_str:000000000000061d .LASF87
     /tmp/ccj9oNuY.s:2757   .debug_str:000000000000049f .LASF88
     /tmp/ccj9oNuY.s:2685   .debug_str:000000000000026a .LASF129
     /tmp/ccj9oNuY.s:2701   .debug_str:00000000000002fe .LASF130
     /tmp/ccj9oNuY.s:2683   .debug_str:0000000000000265 .LASF89
     /tmp/ccj9oNuY.s:2769   .debug_str:00000000000004e4 .LASF90
     /tmp/ccj9oNuY.s:2731   .debug_str:00000000000003ef .LASF91
     /tmp/ccj9oNuY.s:2773   .debug_str:00000000000004ef .LASF92
     /tmp/ccj9oNuY.s:2725   .debug_str:00000000000003d2 .LASF93
     /tmp/ccj9oNuY.s:2749   .debug_str:0000000000000470 .LASF95
     /tmp/ccj9oNuY.s:2861   .debug_str:0000000000000775 .LASF97
     /tmp/ccj9oNuY.s:2859   .debug_str:0000000000000767 .LASF131
     /tmp/ccj9oNuY.s:2719   .debug_str:0000000000000382 .LASF132
     /tmp/ccj9oNuY.s:2767   .debug_str:00000000000004db .LASF98
     /tmp/ccj9oNuY.s:2691   .debug_str:000000000000029b .LASF99
     /tmp/ccj9oNuY.s:2849   .debug_str:000000000000070b .LASF108
     /tmp/ccj9oNuY.s:2739   .debug_str:000000000000041a .LASF100
     /tmp/ccj9oNuY.s:2863   .debug_str:000000000000078e .LASF101
     /tmp/ccj9oNuY.s:2629   .debug_str:000000000000003c .LASF102
     /tmp/ccj9oNuY.s:2805   .debug_str:00000000000005e1 .LASF104
     /tmp/ccj9oNuY.s:2841   .debug_str:00000000000006de .LASF105
     /tmp/ccj9oNuY.s:2759   .debug_str:00000000000004af .LASF106
     /tmp/ccj9oNuY.s:2795   .debug_str:000000000000059a .LASF107
     /tmp/ccj9oNuY.s:2671   .debug_str:000000000000020d .LASF109
     /tmp/ccj9oNuY.s:2677   .debug_str:000000000000022b .LASF110
     /tmp/ccj9oNuY.s:2851   .debug_str:000000000000071c .LASF111
     /tmp/ccj9oNuY.s:2857   .debug_str:0000000000000746 .LASF112
     /tmp/ccj9oNuY.s:2799   .debug_str:00000000000005b9 .LASF113
     /tmp/ccj9oNuY.s:2723   .debug_str:00000000000003b1 .LASF114
     /tmp/ccj9oNuY.s:2865   .debug_str:0000000000000799 .LASF115
     /tmp/ccj9oNuY.s:2695   .debug_str:00000000000002b8 .LASF116
     /tmp/ccj9oNuY.s:2791   .debug_str:0000000000000574 .LASF117
     /tmp/ccj9oNuY.s:2883   .debug_str:0000000000000813 .LASF118
     /tmp/ccj9oNuY.s:46     .text:0000000000000020 .LFB34
     /tmp/ccj9oNuY.s:410    .text:00000000000001a0 .LFE34
     /tmp/ccj9oNuY.s:2623   .debug_str:0000000000000021 .LASF119
GAS LISTING /tmp/ccj9oNuY.s 			page 21


     /tmp/ccj9oNuY.s:2454   .debug_loc:0000000000000000 .LLST0
     /tmp/ccj9oNuY.s:2607   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccj9oNuY.s:2771   .debug_str:00000000000004ea .LASF120
     /tmp/ccj9oNuY.s:2875   .debug_str:00000000000007e1 .LASF121
     /tmp/ccj9oNuY.s:2713   .debug_str:0000000000000360 .LASF122
     /tmp/ccj9oNuY.s:2499   .debug_loc:00000000000000b2 .LLST4
     /tmp/ccj9oNuY.s:2518   .debug_loc:000000000000010e .LLST5
     /tmp/ccj9oNuY.s:2537   .debug_loc:000000000000016a .LLST6
     /tmp/ccj9oNuY.s:234    .text:00000000000000e8 .LBB60
     /tmp/ccj9oNuY.s:248    .text:00000000000000fc .LBE60
     /tmp/ccj9oNuY.s:2544   .debug_loc:000000000000018d .LLST7
     /tmp/ccj9oNuY.s:239    .text:00000000000000f0 .LVL12
     /tmp/ccj9oNuY.s:251    .text:00000000000000fc .LBB61
     /tmp/ccj9oNuY.s:265    .text:0000000000000110 .LBE61
     /tmp/ccj9oNuY.s:2551   .debug_loc:00000000000001b0 .LLST8
     /tmp/ccj9oNuY.s:256    .text:0000000000000104 .LVL14
     /tmp/ccj9oNuY.s:109    .text:0000000000000074 .LBB54
     /tmp/ccj9oNuY.s:124    .text:0000000000000080 .LBE54
     /tmp/ccj9oNuY.s:130    .text:0000000000000088 .LBB56
     /tmp/ccj9oNuY.s:145    .text:0000000000000094 .LBE56
     /tmp/ccj9oNuY.s:184    .text:00000000000000cc .LBB62
     /tmp/ccj9oNuY.s:195    .text:00000000000000d0 .LBE62
     /tmp/ccj9oNuY.s:2558   .debug_loc:00000000000001d3 .LLST9
     /tmp/ccj9oNuY.s:200    .text:00000000000000d4 .LBB64
     /tmp/ccj9oNuY.s:212    .text:00000000000000d8 .LBE64
     /tmp/ccj9oNuY.s:2565   .debug_loc:00000000000001f6 .LLST10
     /tmp/ccj9oNuY.s:276    .text:0000000000000124 .LVL17
     /tmp/ccj9oNuY.s:324    .text:0000000000000158 .LBB44
     /tmp/ccj9oNuY.s:404    .text:00000000000001a0 .LBE44
     /tmp/ccj9oNuY.s:326    .text:0000000000000158 .LBB45
     /tmp/ccj9oNuY.s:341    .text:0000000000000164 .LBE45
     /tmp/ccj9oNuY.s:345    .text:0000000000000168 .LBB47
     /tmp/ccj9oNuY.s:360    .text:0000000000000174 .LBE47
     /tmp/ccj9oNuY.s:375    .text:0000000000000190 .LBB49
     /tmp/ccj9oNuY.s:386    .text:0000000000000194 .LBE49
     /tmp/ccj9oNuY.s:2572   .debug_loc:0000000000000219 .LLST3
     /tmp/ccj9oNuY.s:391    .text:0000000000000198 .LBB51
     /tmp/ccj9oNuY.s:403    .text:00000000000001a0 .LBE51
     /tmp/ccj9oNuY.s:370    .text:000000000000018c .LVL23
     /tmp/ccj9oNuY.s:58     .text:0000000000000030 .LBB34
     /tmp/ccj9oNuY.s:75     .text:000000000000003c .LBE34
     /tmp/ccj9oNuY.s:287    .text:0000000000000128 .LBB39
     /tmp/ccj9oNuY.s:299    .text:0000000000000130 .LBE39
     /tmp/ccj9oNuY.s:2579   .debug_loc:000000000000023c .LLST1
     /tmp/ccj9oNuY.s:313    .text:0000000000000150 .LBB42
     /tmp/ccj9oNuY.s:321    .text:0000000000000154 .LBE42
     /tmp/ccj9oNuY.s:2587   .debug_loc:0000000000000260 .LLST2
     /tmp/ccj9oNuY.s:99     .text:0000000000000070 .LVL1
     /tmp/ccj9oNuY.s:10     .text:0000000000000000 .LFB33
     /tmp/ccj9oNuY.s:40     .text:0000000000000020 .LFE33
     /tmp/ccj9oNuY.s:2869   .debug_str:00000000000007bf .LASF133
     /tmp/ccj9oNuY.s:2657   .debug_str:00000000000001a1 .LASF123
     /tmp/ccj9oNuY.s:2675   .debug_str:000000000000021b .LASF134
     /tmp/ccj9oNuY.s:73     .text:000000000000003c .LVL0
     /tmp/ccj9oNuY.s:104    .text:0000000000000074 .LVL2
     /tmp/ccj9oNuY.s:165    .text:00000000000000ac .LVL4
     /tmp/ccj9oNuY.s:177    .text:00000000000000c8 .LVL6
GAS LISTING /tmp/ccj9oNuY.s 			page 22


     /tmp/ccj9oNuY.s:225    .text:00000000000000e8 .LVL11
     /tmp/ccj9oNuY.s:246    .text:00000000000000fc .LVL13
     /tmp/ccj9oNuY.s:263    .text:0000000000000110 .LVL15
     /tmp/ccj9oNuY.s:279    .text:0000000000000128 .LVL18
     /tmp/ccj9oNuY.s:303    .text:0000000000000138 .LVL20
     /tmp/ccj9oNuY.s:161    .text:00000000000000a8 .LVL3
     /tmp/ccj9oNuY.s:271    .text:0000000000000118 .LVL16
     /tmp/ccj9oNuY.s:167    .text:00000000000000b0 .LVL5
     /tmp/ccj9oNuY.s:183    .text:00000000000000cc .LVL7
     /tmp/ccj9oNuY.s:192    .text:00000000000000d0 .LVL8
     /tmp/ccj9oNuY.s:199    .text:00000000000000d4 .LVL9
     /tmp/ccj9oNuY.s:208    .text:00000000000000d8 .LVL10
     /tmp/ccj9oNuY.s:374    .text:0000000000000190 .LVL24
     /tmp/ccj9oNuY.s:383    .text:0000000000000194 .LVL25
     /tmp/ccj9oNuY.s:296    .text:0000000000000130 .LVL19
     /tmp/ccj9oNuY.s:312    .text:0000000000000150 .LVL21
     /tmp/ccj9oNuY.s:319    .text:0000000000000154 .LVL22
     /tmp/ccj9oNuY.s:417    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccj9oNuY.s:107    .text:0000000000000074 .LBB53
     /tmp/ccj9oNuY.s:213    .text:00000000000000d8 .LBE53
     /tmp/ccj9oNuY.s:229    .text:00000000000000e8 .LBB67
     /tmp/ccj9oNuY.s:283    .text:0000000000000128 .LBE67

UNDEFINED SYMBOLS
console_handler
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN3TCB7runningE
